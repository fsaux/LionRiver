<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:map="clr-namespace:MapControl;assembly=MapControl.WPF"
             xmlns:local="clr-namespace:LionRiver"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"  x:Class="LionRiver.App"
             StartupUri="MainWindow.xaml">

    <Application.Resources>

        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>

                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Colors/material.xaml" />
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Size/s.xaml" />
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Weight/normal.xaml" />
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/base.xaml" />

            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="labelStyle" TargetType="{x:Type Label}">
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Margin" Value="0,0,0,5" />
            </Style>

            <LinearGradientBrush x:Key="ColorMap" StartPoint="0,0" EndPoint="1,0" ColorInterpolationMode="ScRgbLinearInterpolation">
                <GradientStop Color="#FF093893" Offset="0.203" />
                <GradientStop Color="#FF10FF20" Offset="0.535" />
                <GradientStop Color="#FFFFFF60" Offset="0.663" />
                <GradientStop Color="#FFFF4B00" Offset="0.855" />
                <GradientStop Color="#FFA925FF" Offset="1" />
                <GradientStop Color="#FF94C8F5" Offset="0.343" />
            </LinearGradientBrush>

            <LinearGradientBrush  x:Key="PerformanceMap" EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="#FFDA3A3A" Offset="0.793"/>
                <GradientStop Color="#FFAAA429" Offset="0.91"/>
                <GradientStop Color="#FF1A9920" Offset="1"/>
            </LinearGradientBrush>

            <DataTemplate x:Key="RedBackground">
                <Grid>
                    <TextBlock Foreground="Red" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Text="{Binding}"/>
                </Grid>
            </DataTemplate>

            <Style TargetType="{x:Type ToggleButton}" x:Key="checkedToggle">
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="ContentTemplate" Value="{StaticResource RedBackground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Silver"/>
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
            </Style>

            <Style x:Key="ColumnHeaderStyle1" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFB888E2" Offset="0" />
                            <GradientStop Color="Violet" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Silver"/>
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
            </Style>

            <Style x:Key="ColumnHeaderStyle2" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFF2AF85" Offset="0" />
                            <GradientStop Color="Orange" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Silver"/>
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
            </Style>

            <Style x:Key="ColumnHeaderStyle3" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF6ABCD4" Offset="0" />
                            <GradientStop Color="Cyan" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Silver"/>
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
            </Style>

            <Style x:Key="ColumnHeaderStyle4" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFDEDE61" Offset="0" />
                            <GradientStop Color="Yellow" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Silver"/>
                <Setter Property="BorderThickness" Value="0,1,1,1"/>
            </Style>

            <Style x:Key="RowStyle" TargetType="{x:Type DataGridRow}" >
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Silver" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="Lime"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CellStyle"  TargetType="{x:Type TextBlock}">
                <Setter Property="TextAlignment" Value="Center" />
            </Style>

            <Style TargetType="{x:Type CheckBox}" x:Key="DataGridCheckBox">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GridViewColumn}}}" />
            </Style>

            <Style x:Key="MainToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Padding" Value="3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                                            Storyboard.TargetName="ToggleBorder" To="LimeGreen" Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed" />
                                        <VisualState x:Name="Disabled"/>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                            Storyboard.TargetName="ToggleBorder" To="LimeGreen" Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked" />
                                        <VisualState x:Name="Indeterminate" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>

                                <Grid>

                                    <Border x:Name="ToggleBorder" BorderBrush="Black" BorderThickness="2" CornerRadius="4" Background="#FF708BD4" />

                                    <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                                </Grid>

                            </Grid>
                        </ControlTemplate>

                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TextBlockToggleForeground" TargetType="{x:Type TextBlock}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding FormattedValue}" Value="">
                        <Setter Property="Foreground" Value="Red"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <ContextMenu  x:Key="FleetBoatContextMenu">
                <MenuItem Header="Select" 
                                  Command="local:CommandLibrary.SelectFleetBoat"
                                  CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="{Binding Parent, RelativeSource={RelativeSource Self}}"/>
                <MenuItem Header="UnSelect"
                                  Command="local:CommandLibrary.UnselectFleetBoat"
                                  CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="{Binding Parent, RelativeSource={RelativeSource Self}}"/>
                <MenuItem Header="Hide unselected"
                                  Command="local:CommandLibrary.HideUnselectedFleetBoats"
                                  CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="{Binding Parent, RelativeSource={RelativeSource Self}}"/>
                <MenuItem Header="Unhide all"
                                  Command="local:CommandLibrary.UnhideAllFleetBoats"
                                  CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  CommandParameter="{Binding Parent, RelativeSource={RelativeSource Self}}"/>
            </ContextMenu>

            <Style x:Key="FleetBoatItemStyle" TargetType="{x:Type map:MapItem}">
                <Setter Property="map:MapPanel.Location" Value="{Binding Location}"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="ContextMenu" Value="{StaticResource FleetBoatContextMenu}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type map:MapItem}">
                            <Canvas x:Name="boatCanvas">
                                <Canvas.Resources>
                                    <local:BooleanToVisibilityMultiConverter x:Key="BooleanToVisibilityMultiConverter" />
                                </Canvas.Resources>
                                <Canvas.Visibility>
                                    <MultiBinding Converter="{StaticResource BooleanToVisibilityMultiConverter}">
                                        <Binding Path="BoatVisible" />
                                        <Binding Path="IsAvailable" />
                                    </MultiBinding>
                                </Canvas.Visibility>

                                <Polyline 
                                      Points="-4,0 -3,-6 0,-11 3,-6 4,0 4,6 3,9 -3,9 -4,6 -4,0">
                                    <Polyline.Fill>
                                        <SolidColorBrush x:Name="btColor"   Color="{Binding BoatColor}"/>
                                    </Polyline.Fill>
                                    <Polyline.RenderTransform>
                                            <RotateTransform Angle="{Binding Heading}" />
                                    </Polyline.RenderTransform>
                                </Polyline>

                                <Grid Canvas.Top="6">
                                    <TextBlock x:Name="boatName" Text="{Binding Name}" FontSize="9" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="DimGray"/>
                                </Grid>
                            </Canvas>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">

                                    <Setter Property="Foreground" TargetName="boatName" Value="Black"/>
                                    <Setter Property="Background" TargetName="boatName" Value="Gray"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                    <Setter Property="Foreground" TargetName="boatName" Value="White"/>
                                    <Setter Property="Canvas.RenderTransform" TargetName="boatCanvas">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="1.3" ScaleY="1.3"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                            
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
                <Style.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="Black" />
                </Style.Resources>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate  TargetType="{x:Type ComboBox}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Themes:SystemDropShadowChrome>
                                </Popup>
                                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Black" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="ClickMode" Value="Press"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border x:Name="templateRoot" CornerRadius="4" BorderBrush="#FF807F7F" BorderThickness="{TemplateBinding BorderThickness}"
                                                                SnapsToDevicePixels="True">
                                                            <Border.Background>
                                                                <SolidColorBrush Color="Black"/>
                                                            </Border.Background>
                                                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                                <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="#FF606060" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                                            </Border>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
                                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                            </MultiDataTrigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFC7C8C8"/>
                                                            </Trigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="Black"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFC7C8C8"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                                <Setter Property="Background" TargetName="splitBorder">
                                                                    <Setter.Value>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#FFEBF4FC" Offset="0"/>
                                                                            <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
                                                            </MultiDataTrigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFC7C8C8"/>
                                                            </Trigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="Black"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                                <Setter Property="Background" TargetName="splitBorder">
                                                                    <Setter.Value>
                                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                            <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                                                            <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                                        </LinearGradientBrush>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
                                                            </MultiDataTrigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                                            </Trigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                            </MultiDataTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter x:Name="contentPresenter"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                      Content="{TemplateBinding SelectionBoxItem}" 
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      IsHitTestVisible="False" 
                                      Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="False">
                                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True"/>
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                                </MultiTrigger>
                                <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ContexMenuItemStyle" TargetType="MenuItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="MenuItem" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib">
                            <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="templateRoot" SnapsToDevicePixels="True">
                                <Grid Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter RecognizesAccessKey="True" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" ContentSource="Header" Name="menuHeaderContainer" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.Column="2" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsHighlighted">
                                    <Setter Property="Panel.Background" TargetName="templateRoot">
                                        <Setter.Value>
                                            <SolidColorBrush>#3D26A0DA</SolidColorBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Border.BorderBrush" TargetName="templateRoot">
                                        <Setter.Value>
                                            <SolidColorBrush>#FF26A0DA</SolidColorBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Trigger.Value>
                                        <s:Boolean>True</s:Boolean>
                                    </Trigger.Value>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled">
                                    <Setter Property="TextElement.Foreground" TargetName="templateRoot">
                                        <Setter.Value>
                                            <SolidColorBrush>#FF707070</SolidColorBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Trigger.Value>
                                        <s:Boolean>False</s:Boolean>
                                    </Trigger.Value>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="MenuItem.IsHighlighted">
                                            <Condition.Value>
                                                <s:Boolean>True</s:Boolean>
                                            </Condition.Value>
                                        </Condition>
                                        <Condition Property="UIElement.IsEnabled">
                                            <Condition.Value>
                                                <s:Boolean>False</s:Boolean>
                                            </Condition.Value>
                                        </Condition>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Panel.Background" TargetName="templateRoot">
                                        <Setter.Value>
                                            <SolidColorBrush>#0A000000</SolidColorBrush>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Border.BorderBrush" TargetName="templateRoot">
                                        <Setter.Value>
                                            <SolidColorBrush>#21000000</SolidColorBrush>
                                        </Setter.Value>
                                    </Setter>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style  TargetType="ContextMenu">
                <Style.Resources>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource ContexMenuItemStyle}"/>
                </Style.Resources>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ContextMenu" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
                            <mwt:SystemDropShadowChrome Color="#00FFFFFF" Name="Shdw" SnapsToDevicePixels="True">
                                <Border  Background="{TemplateBinding Panel.Background}" Name="ContextMenuBorder" BorderBrush="Gray" BorderThickness="1">
                                    <ScrollViewer Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=FrameworkElement, ResourceId=MenuScrollViewer}}" Name="ContextMenuScrollViewer" Margin="0" Grid.ColumnSpan="2">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Width="0" Height="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle Fill="{x:Null}" Name="OpaqueRect" Width="Auto" Height="Auto" />
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </mwt:SystemDropShadowChrome>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ContextMenuService.HasDropShadow">
                                    <Setter Property="FrameworkElement.Margin" TargetName="Shdw">
                                        <Setter.Value>
                                            <Thickness>0,0,5,5</Thickness>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="mwt:SystemDropShadowChrome.Color" TargetName="Shdw">
                                        <Setter.Value>
                                            <Color>#71000000</Color>
                                        </Setter.Value>
                                    </Setter>
                                    <Trigger.Value>
                                        <s:Boolean>True</s:Boolean>
                                    </Trigger.Value>
                                </Trigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="ContextMenuScrollViewer">
                                    <Setter Property="Canvas.Top" TargetName="OpaqueRect">
                                        <Setter.Value>
                                            <Binding Path="VerticalOffset" ElementName="ContextMenuScrollViewer" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Canvas.Left" TargetName="OpaqueRect">
                                        <Setter.Value>
                                            <Binding Path="HorizontalOffset" ElementName="ContextMenuScrollViewer" />
                                        </Setter.Value>
                                    </Setter>
                                    <Trigger.Value>
                                        <s:Boolean>False</s:Boolean>
                                    </Trigger.Value>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>

    </Application.Resources>

</Application>
