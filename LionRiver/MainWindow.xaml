<Window x:Class="LionRiver.MainWindow"
        x:Name="MainWnd"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:LionRiver"
        xmlns:p="clr-namespace:LionRiver.Properties"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:map="clr-namespace:MapControl;assembly=MapControl.WPF"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:my="clr-namespace:LionRiver"
        xmlns:mycontrols="clr-namespace:LionRiver.UserControls"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 

        Title="LionRiver"
        Width="{Binding Source={x:Static p:Settings.Default}, Path=Width, Mode=TwoWay}" 
        Height="{Binding Source={x:Static p:Settings.Default}, Path=Height, Mode=TwoWay}" 
        Left="{Binding Source={x:Static p:Settings.Default}, Path=Left, Mode=TwoWay}" 
        Top="{Binding Source={x:Static p:Settings.Default}, Path=Top, Mode=TwoWay}"
        WindowState="{Binding Source={x:Static p:Settings.Default}, Path=WindowState, Mode=TwoWay}"
        Foreground="{x:Null}" Background="{x:Null}"  ResizeMode="CanResize" ShowInTaskbar="True" WindowStyle="SingleBorderWindow" Icon="/LionRiver;component/Images/redhat_starthere.ico" 
       
        Closing="Window_Closing" StateChanged="MainWnd_StateChanged"
        mc:Ignorable="d" 
        d:DesignHeight="450" d:DesignWidth="800">

    <Window.Resources>
        <local:Inst x:Key="InstrumentData"></local:Inst>
        <local:SampleItemCollection x:Key="BoatsItemCollection"/>
        <local:SampleItemCollection x:Key="LegsItemCollection"/>

        <local:LabelConverterTop x:Key="LabelConverterTop" />
        <local:LabelConverterLeft x:Key="LabelConverterLeft" />
        <local:CheckToVisConverter x:Key="CheckToVisConverter"/>
        <local:PerfToBrushConverter x:Key="PerfToBrushConverter"/>
        <local:SpeedToVisConverter x:Key="SpeedToVisConverter"/>

        <sys:Double x:Key="WindLabelOff">122</sys:Double>
        <sys:Double x:Key="BoatDataLabelOff">30</sys:Double>
        <sys:Double x:Key="PerfDataLabelOff">-32</sys:Double>
        <sys:Double x:Key="CurrentLabelOff">70</sys:Double>

        <Style x:Key="BoatItemStyle" TargetType="map:MapItem">
            <Setter Property="map:MapPanel.Location" Value="{Binding Location}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Bottom"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Background" Value="White"/>
            <EventSetter Event="MouseEnter" Handler="BoatItem_OnMouseEnter"></EventSetter>
            <EventSetter Event="MouseLeave" Handler="BoatItem_OnMouseLeave"></EventSetter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="map:MapItem">
                        <Canvas Visibility="{Binding BoatVisible}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="BtColor" Storyboard.TargetProperty="Color" To="LimeGreen" Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected"/>
                                    <VisualState x:Name="Selected"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CurrentStates">
                                    <VisualState x:Name="NotCurrent"/>
                                    <VisualState x:Name="Current"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <!-- Boat-->
                            <Polyline 
                                      Points="-7,0,  -5,-11, 0,-21, 5,-11, 7,0, 7,11, 5,18,   -5,18,  -7,11,  -7,0">
                                <Polyline.Fill>
                                    <SolidColorBrush x:Name="BtColor" Color="{Binding BoatColor}" Opacity="0.5"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding Heading}" />
                                </Polyline.RenderTransform>
                            </Polyline>

                            <!-- Course Line-->
                            <Polyline StrokeThickness="2" StrokeDashArray="3 3" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=CourseCheck, Mode=TwoWay,
                                                    Converter={StaticResource CheckToVisConverter}}">
                                <Polyline.Stroke>
                                    <SolidColorBrush Color="#FF0097FF" />
                                </Polyline.Stroke>
                                <Polyline.Points>
                                    <Point X="0" Y="0" ></Point>
                                    <Point X="0" Y="-1000"></Point>
                                </Polyline.Points>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding Course}" />
                                </Polyline.RenderTransform>
                            </Polyline>

                            <!-- Wind Arrow -->
                            <Polyline Visibility="{Binding Source={x:Static p:Settings.Default}, Path=WindDirectionCheck, Mode=TwoWay,
                                                    Converter={StaticResource CheckToVisConverter}}"
                                      Points="0,-85, -10,-115, 0,-105 10,-115">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="Cyan"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding WindDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>
                            <Grid Visibility="{Binding Source={x:Static p:Settings.Default}, Path=WindDirectionCheck, Mode=TwoWay,
                                                    Converter={StaticResource CheckToVisConverter}}"
                                Canvas.Left="{Binding WindDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource WindLabelOff}}"
                                Canvas.Top="{Binding WindDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource WindLabelOff}}">
                                <TextBlock Text="{Binding WindSpeed,StringFormat=N0}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush x:Name="labelForeground" Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Predicted Wind Arrow -->
                            <Polyline Visibility="{Binding PredictedWindVisible}"
                                      Points="0,-85, -10,-115, 0,-105 10,-115">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="Gray"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding PredictedWindDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>
                            <Grid Visibility="{Binding PredictedWindVisible}"
                                Canvas.Left="{Binding PredictedWindDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource WindLabelOff}}"
                                Canvas.Top="{Binding PredictedWindDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource WindLabelOff}}">
                                <TextBlock Text="{Binding PredictedWindSpeed,StringFormat=N0}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush  Color="Gray"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Boat data - speed -->
                            <Grid Visibility="{Binding Source={x:Static p:Settings.Default}, Path=BoatSpeedCheck, Mode=TwoWay,
                                                Converter={StaticResource CheckToVisConverter}}"
                                Canvas.Left="{Binding Heading,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource BoatDataLabelOff}}"
                                Canvas.Top="{Binding Heading,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource BoatDataLabelOff}}">
                                <TextBlock Text="{Binding BoatSpeed,StringFormat=N1}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Boat data - perf -->
                            <Grid Visibility="{Binding Source={x:Static p:Settings.Default}, Path=BoatPerfCheck, Mode=TwoWay,
                                                Converter={StaticResource CheckToVisConverter}}"
                                Canvas.Left="{Binding Heading,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource PerfDataLabelOff}}"
                                Canvas.Top="{Binding Heading,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource PerfDataLabelOff}}">
                                <TextBlock Text="{Binding BoatPerf,StringFormat=P0}" FontSize="11" Padding="2"
                                           Background="{Binding BoatPerf,Converter={StaticResource PerfToBrushConverter}}">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Current Arrow -->
                            <Polyline Points="0,-40, -6,-55, 6,-55" 
                                      Visibility="{Binding Source={x:Static p:Settings.Default}, Path=CurrentDirectionCheck, Mode=TwoWay,
                                                    Converter={StaticResource CheckToVisConverter}}">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="PaleVioletRed"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding CurrentDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>

                            <Grid Visibility="{Binding Source={x:Static p:Settings.Default}, Path=CurrentDirectionCheck, Mode=TwoWay,
                                                    Converter={StaticResource CheckToVisConverter}}"
                                Canvas.Left="{Binding CurrentDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource CurrentLabelOff}}"
                                Canvas.Top="{Binding CurrentDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource CurrentLabelOff}}">
                                <TextBlock Text="{Binding CurrentSpeed,StringFormat=N1}" FontSize="12">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Predicted Current Arrow -->
                            <Polyline Visibility="{Binding PredictedCurrentVisible}"
                                      Points="0,-40, -6,-55, 6,-55">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="Gray"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding PredictedCurrentDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>
                            <Grid Visibility="{Binding PredictedCurrentVisible}"
                                Canvas.Left="{Binding PredictedCurrentDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource CurrentLabelOff}}"
                                Canvas.Top="{Binding PredictedCurrentDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource CurrentLabelOff}}">
                                <TextBlock Text="{Binding PredictedCurrentSpeed,StringFormat=N1}" FontSize="12">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="Gray"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="ReplayBoatItemStyle" TargetType="map:MapItem">
            <Setter Property="map:MapPanel.Location" Value="{Binding Location}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Bottom"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Background" Value="White"/>
            <EventSetter Event="MouseEnter" Handler="BoatItem_OnMouseEnter"></EventSetter>
            <EventSetter Event="MouseLeave" Handler="BoatItem_OnMouseLeave"></EventSetter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="map:MapItem">
                        <Canvas Visibility="{Binding BoatVisible}">

                            <!-- Boat-->
                            <Polyline 
                                      Points="-7,0,  -5,-11, 0,-21, 5,-11, 7,0, 7,11, 5,18,   -5,18,  -7,11,  -7,0">
                                <Polyline.Fill>
                                    <SolidColorBrush Color="{Binding BoatColor}"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding Heading}" />
                                </Polyline.RenderTransform>
                            </Polyline>

                            <!-- Time -->
                            <StackPanel Background="#FF645B5B"
                                Canvas.Left="30"
                                Canvas.Top="30">
                                <TextBlock Text="{Binding Time,StringFormat=Time: {0:HH:mm}}" FontSize="14" Foreground="Yellow" />
                                <TextBlock Text="{Binding WindDirection,StringFormat=TWD: 0}" FontSize="14" Foreground="Yellow"/>
                            </StackPanel>
                            
                            <!-- Wind Arrow -->
                            <Polyline 
                                      Points="0,-85, -10,-115, 0,-105 10,-115">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="Cyan"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding WindDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>
                            <Grid 
                                Canvas.Left="{Binding WindDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource WindLabelOff}}"
                                Canvas.Top="{Binding WindDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource WindLabelOff}}">
                                <TextBlock Text="{Binding WindSpeed,StringFormat=N0}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush x:Name="labelForeground" Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Boat data - speed -->
                            <Grid 
                                Canvas.Left="{Binding Heading,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource BoatDataLabelOff}}"
                                Canvas.Top="{Binding Heading,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource BoatDataLabelOff}}">
                                <TextBlock Text="{Binding BoatSpeed,StringFormat=N1}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>

                            <!-- Current Arrow -->
                            <Polyline Visibility="{Binding CurrentSpeed,
                                                Converter={StaticResource SpeedToVisConverter}}"
                                      Points="0,-40, -6,-55, 6,-55">
                                <Polyline.Fill>
                                    <SolidColorBrush  Color="PaleVioletRed"/>
                                </Polyline.Fill>
                                <Polyline.RenderTransform>
                                    <RotateTransform Angle="{Binding CurrentDirection}" />
                                </Polyline.RenderTransform>
                            </Polyline>
                            <Grid Visibility="{Binding CurrentSpeed,
                                                Converter={StaticResource SpeedToVisConverter}}"
                                Canvas.Left="{Binding CurrentDirection,
                                                Converter={StaticResource LabelConverterLeft},
                                                ConverterParameter={StaticResource CurrentLabelOff}}"
                                Canvas.Top="{Binding CurrentDirection,
                                                Converter={StaticResource LabelConverterTop},
                                                ConverterParameter={StaticResource CurrentLabelOff}}">
                                <TextBlock Text="{Binding CurrentSpeed,StringFormat=N1}" FontSize="12">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LegItemStyle" TargetType="map:MapItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="map:MapItem">
                        <map:MapPolyline Locations="{Binding Locations}" Stroke="#FF3893C7" StrokeThickness="4" Opacity="0.5"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="MarkItemStyle" TargetType="my:MarkItem">
            <Setter Property="map:MapPanel.Location" Value="{Binding Location}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Bottom"/>
            <EventSetter Event="MouseEnter" Handler="MarkItem_OnMouseEnter"></EventSetter>
            <EventSetter Event="MouseLeave" Handler="MarkItem_OnMouseLeave"></EventSetter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="my:MarkItem">
                        <Canvas>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="selectedPath" Storyboard.TargetProperty="Opacity" To="0.3" Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected"/>
                                    <VisualState x:Name="Selected"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CurrentStates">
                                    <VisualState x:Name="NotCurrent"/>
                                    <VisualState x:Name="Current">
                                        <Storyboard RepeatBehavior="Forever">
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Color"
                                                                          Storyboard.TargetName="labelBackground" AutoReverse="True">
                                                <ColorAnimationUsingKeyFrames.KeyFrames>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:0" Value="LimeGreen"/>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:0.5" Value="Transparent"/>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:1" Value="LimeGreen"/>
                                                </ColorAnimationUsingKeyFrames.KeyFrames>
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Color"
                                                                          Storyboard.TargetName="labelForeground" AutoReverse="True">
                                                <ColorAnimationUsingKeyFrames.KeyFrames>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:0" Value="Black"/>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:0.5" Value="White"/>
                                                    <DiscreteColorKeyFrame KeyTime="0:0:1" Value="Black"/>
                                                </ColorAnimationUsingKeyFrames.KeyFrames>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path Name="selectedPath" Fill="GreenYellow" Opacity="0">
                                <Path.Data>
                                    <EllipseGeometry RadiusX="20" RadiusY="20"/>
                                </Path.Data>
                            </Path>
                            <Path Name="path" StrokeThickness="2" Fill="Transparent">
                                <Path.Stroke>
                                    <SolidColorBrush Color="Yellow"/>
                                </Path.Stroke>
                                <Path.Data>
                                    <EllipseGeometry RadiusX="5" RadiusY="5"/>
                                </Path.Data>
                            </Path>
                            <Grid Canvas.Left="15" Canvas.Top="-8">
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <SolidColorBrush x:Name="labelBackground"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <TextBlock Margin="2,0,2,0" Text="{Binding Name}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush x:Name="labelForeground" Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="HitPointItemStyle" TargetType="my:MarkItem">
            <Setter Property="map:MapPanel.Location" Value="{Binding Location}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Bottom"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="my:MarkItem">
                        <Canvas>
                            <Polyline 
                              Points="-6,0,  0,-6, 6,0, 0,6">
                                <Polyline.Fill>
                                    <SolidColorBrush Color="Yellow"/>
                                </Polyline.Fill>
                            </Polyline>
                            <Grid Canvas.Left="15" Canvas.Top="-8">
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <SolidColorBrush x:Name="labelBackground"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <TextBlock Margin="2,0,2,0" Text="{Binding Name}" FontSize="14">
                                    <TextBlock.Foreground>
                                        <SolidColorBrush x:Name="labelForeground" Color="White"/>
                                    </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ContextMenu  x:Key="MarkContextMenu_Standard">
            <MenuItem Header="Navigate To" Command="local:CommandLibrary.NavigateTo" CommandParameter="{Binding Parent.PlacementTarget.SelectedItem, RelativeSource={RelativeSource Self}}"/>
            <MenuItem Header="Move" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}" Click="MoveMark"/>
            <MenuItem Header="Delete" Command="local:CommandLibrary.DeleteMark" CommandParameter="{Binding Parent.PlacementTarget.SelectedItem, RelativeSource={RelativeSource Self}}"/>
        </ContextMenu>

        <ContextMenu x:Key="ContextMenu_CreatingRoute">
            <MenuItem Header="Create Route" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}" Click="CreateRoute"/>
            <MenuItem Header="Cancel" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}" Click="CancelCreateRoute"/>
        </ContextMenu>

        <ContextMenu x:Key="LegContextMenu">
            <MenuItem Header="Insert Mark" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}" Click="LegInsertMark"/>
        </ContextMenu>

        <ContextMenu x:Key="MapContextMenu_Standard">
            <MenuItem Header="Add Mark"
                                      Command="local:CommandLibrary.AddMark"
                                      CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                      CommandParameter="{Binding Parent, RelativeSource={RelativeSource Self}}"/>
        </ContextMenu>



    </Window.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <ToolBarPanel Grid.Row="0" Height="Auto" HorizontalAlignment="Stretch" Margin="0" x:Name="MainMenuPanel" VerticalAlignment="Stretch" Width="Auto">
            <Menu Height="23" x:Name="menu1" Width="Auto">
                <MenuItem  Header="File">
                    <MenuItem Header="Load Waypoint/Route" Click="GPXLoadButton_Click" />
                    <MenuItem Header="Load Polar" Click="MenuItem_Polar_Click" />
                    <MenuItem Header="Load Wind Grib" Click="GribWindLoadButton_Click" />
                    <MenuItem Header="Load Current Grib" Click="GribCurrentLoadButton_Click"/>
                    <MenuItem Header="Replay Log" Click="ReplayLogButton_Click"/>
                    <Separator />
                    <MenuItem Header="Save Waypoint/Route" Click="MenuItem_SaveWaypoint_Click"/>
                    <MenuItem Header="Save Track" />
                    <Separator />
                    <MenuItem Header="Setup" Click="MenuItem_Setup_Click"/>
                </MenuItem>
                <MenuItem Header="Course" >
                    <MenuItem Header="Windward-Leeward" Click="MenuItem_WLCourseSetup_Click"  />
                </MenuItem>
            </Menu>
        </ToolBarPanel>
                
        <Grid  Grid.Row="1" Height="Auto" HorizontalAlignment="Stretch" Margin="0" x:Name="ChartingGrid" VerticalAlignment="Stretch" Width="Auto">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="{Binding ColumnWidth1, Mode=TwoWay, Source={x:Static p:Settings.Default}}"/>
            </Grid.ColumnDefinitions>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="{Binding RowHeight1, Mode=TwoWay, Source={x:Static p:Settings.Default}}"/>
                </Grid.RowDefinitions>
                
                <Grid x:Name="MapGrid" Grid.Row="0">

                    <Grid Name="FleetDownloadProgressGrid" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5" Visibility="Hidden">
                        <ProgressBar Name="FleetDownloadProgressBar" Value="50" BorderBrush="{x:Null}">
                            <ProgressBar.Background>
                                <SolidColorBrush Color="Black" Opacity="0.7"/>
                            </ProgressBar.Background>
                        </ProgressBar>
                        <TextBlock Text="Fleet Download in Progress" FontSize="16" Foreground="White" Padding="3"></TextBlock>
                    </Grid>

                    <map:Map x:Name="map" IsManipulationEnabled="True"                         
        			Center="-34.5,-58.5" ZoomLevel="10" MaxZoomLevel="20"
        			ManipulationInertiaStarting="MapManipulationInertiaStarting"
                         
                         MouseLeftButtonUp="MapMouseLeftButtonUp"    
                         MouseLeftButtonDown="MapMouseLeftButtonDown"
                         MouseRightButtonDown="MapMouseRightButtonDown"
                         MouseMove="MapMouseMove"

                         ContextMenu="{StaticResource MapContextMenu_Standard}">

                        <map:MapItemsControl ItemsSource="{StaticResource BoatsItemCollection}"
                                             ItemContainerStyle="{StaticResource BoatItemStyle}"
                                             SelectionMode="Single"
                                             Panel.ZIndex="20"
                                             PreviewMouseLeftButtonDown="Boat_PreviewMouseLeftButtonDown"
                                             PreviewMouseLeftButtonUp="Boat_PreviewMouseLeftButtonUp"/>

                        <map:MapItemsControl  x:Name="LegItemsControl" ItemsSource="{StaticResource LegsItemCollection}"        				
                                              ItemContainerStyle="{StaticResource LegItemStyle}"                        
                                              ContextMenu="{StaticResource LegContextMenu}"
                                              Panel.ZIndex="30" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=RouteVisible, Mode=OneWay,
                                                    Converter={StaticResource CheckToVisConverter}}"/>

                        <local:MarkItemsControl x:Name="markItemsControl" ItemsSource="{Binding}"
                                                ItemContainerStyle="{StaticResource MarkItemStyle}" 
                                                SelectionMode="Single"
                                                ActiveItem="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}},Path=ActiveMark}"
                                                                         
                                                PreviewMouseLeftButtonDown="Mark_PreviewMouseLeftButtonDown"                         
                                                PreviewMouseLeftButtonUp="Mark_PreviewMouseLeftButtonUp"                         
                                                PreviewMouseMove="Mark_PreviewMouseMove"
                                                
                                                ContextMenu="{StaticResource MarkContextMenu_Standard}"
                                                Panel.ZIndex="30">
                        </local:MarkItemsControl>

                        <local:MeasureControl x:Name="mapMeasureControl" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="50,50,0,50" Visibility="Hidden"/>
                        <!--<local:RouteReplayControl x:Name="mapRouteReplayControl" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="50,50,0,50" Visibility="Hidden" Panel.ZIndex="40"/>-->

                        <map:MapItem Name="mainBoat" Style="{StaticResource BoatItemStyle}"
                                 PreviewMouseLeftButtonDown="Boat_PreviewMouseLeftButtonDown"
                                 PreviewMouseLeftButtonUp="Boat_PreviewMouseLeftButtonUp"/>

                        <map:MapItem Name="repBoat" Style="{StaticResource ReplayBoatItemStyle}"/>


                        <local:MarkItem x:Name="HitP" Style="{StaticResource HitPointItemStyle}"></local:MarkItem>
                        <local:MarkItem x:Name="HitS" Style="{StaticResource HitPointItemStyle}"></local:MarkItem>

                    </map:Map>

                    <DockPanel Height="Auto" HorizontalAlignment="Stretch" Margin="5,5,5,0" x:Name="MapToolbarPanel" VerticalAlignment="Top" Width="Auto" Panel.ZIndex="1" LastChildFill="False" Background="{x:Null}">

                        <ToggleButton  Name="CenterButton" Checked="CenterButton_Checked" Unchecked="CenterButton_Unchecked"  Style="{StaticResource MainToggleButton}" Margin="2" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image Source="Images/Maps-and-Geolocation-Street-view-icon.png" Stretch="None" HorizontalAlignment="Center"  Margin="2" ToolTip="Center on boat"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="OrientationButton" Unchecked="OrientationButton_Unchecked" Checked="OrientationButton_Checked" Style="{StaticResource MainToggleButton}"  Margin="2" VerticalAlignment="Top" >
                            <ToggleButton.Content>
                                <Image Source="Images/City-Gps-device-icon.png" Stretch="None" Margin="2" ToolTip="Course Up"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="MarkButton" Checked="MarkButton_Checked" Unchecked="MarkButton_Unchecked" Style="{StaticResource MainToggleButton}" Margin="2" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image Source="Images/Maps-and-Geolocation-Marker-icon.png" Stretch="None" Margin="2" ToolTip="Marks"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="RouteButton" Checked="RouteButton_Checked" Unchecked="RouteButton_Unchecked" Style="{StaticResource MainToggleButton}" Margin="2" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image Source="Images/Maps-and-Geolocation-Polyline-icon.png" Stretch="None" Margin="2" ToolTip="Routes"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="MeasureButton" Style="{StaticResource MainToggleButton}" Margin="2" Checked="MeasureButton_Checked" Unchecked="MeasureButton_Unchecked" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image Source="Images/Very-Basic-Ruler-icon.png" Stretch="None" Margin="2" ToolTip="Measure"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <Grid DockPanel.Dock="Right" Height="Auto" Width="110" HorizontalAlignment="Stretch" Margin="5,0,0,0" x:Name="CommStatusGrid" VerticalAlignment="Stretch">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="17" />
                                <RowDefinition Height="36*" />
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0" Grid.RowSpan="1" Height="Auto" HorizontalAlignment="Stretch" Margin="0" x:Name="grid6" VerticalAlignment="Stretch" Width="Auto">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <Border Background="LightGray" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="4" Grid.ColumnSpan="1" Height="Auto" HorizontalAlignment="Stretch" Margin="1,2,1,1" x:Name="borderPort1" VerticalAlignment="Stretch" Width="Auto" Padding="0">
                                    <Label Background="{x:Null}" Content="1" FontSize="7" Height="Auto" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0" Margin="0" />
                                </Border>
                                <Border Grid.Column="1" Background="LightGray" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="4" Grid.ColumnSpan="1" Height="Auto" HorizontalAlignment="Stretch" Margin="1,2,1,1" x:Name="borderPort2" VerticalAlignment="Stretch" Width="Auto" Padding="0">
                                    <Label Background="{x:Null}" Content="2" FontSize="7" Height="Auto" HorizontalContentAlignment="Center"  VerticalContentAlignment="Center" Padding="0" Margin="0" />
                                </Border>
                                <Border Grid.Column="2" Background="LightGray" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="4" Grid.ColumnSpan="1" Height="Auto" HorizontalAlignment="Stretch" Margin="1,2,1,1" x:Name="borderPort3" VerticalAlignment="Stretch" Width="Auto" Padding="0">
                                    <Label Background="{x:Null}" Content="3" FontSize="7" Height="Auto" HorizontalContentAlignment="Center"  VerticalContentAlignment="Center" Padding="0" Margin="0" />
                                </Border>
                                <Border Grid.Column="3" Background="LightGray" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="4" Grid.ColumnSpan="1" Height="Auto" HorizontalAlignment="Stretch" Margin="1,2,1,1" x:Name="borderPort4" VerticalAlignment="Stretch" Width="Auto" Padding="0">
                                    <Label Background="{x:Null}" Content="4" FontSize="7" Height="Auto" HorizontalContentAlignment="Center"  VerticalContentAlignment="Center" Padding="0" Margin="0" />
                                </Border>

                            </Grid>
                            <Border Background="{x:Null}" BorderBrush="DarkGray" BorderThickness="2" CornerRadius="4" Grid.Row="1"  Height="Auto" HorizontalAlignment="Stretch" Margin="0,0,1,2" x:Name="border4" VerticalAlignment="Stretch" Width="Auto">
                                <Viewbox Height="Auto" Width="Auto" Margin="2">
                                    <Grid Height="Auto" x:Name="LatLonGrid" Width="Auto" MouseDown="LatLonGrid_MouseDown">
                                        <Grid.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem x:Name="ContextMenuMOBClear" Header="Clear MOB"  IsEnabled="False" Click="ContextMenuMOBClear_Click"/>
                                            </ContextMenu>
                                        </Grid.ContextMenu>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBlock Grid.Row="0" x:Name="LatTextBlock" Foreground="White" Text="{Binding FormattedValue}"/>
                                        <TextBlock Grid.Row="1" x:Name="LonTextBlock" Foreground="White" Text="{Binding FormattedValue}"/>
                                    </Grid>
                                </Viewbox>
                            </Border>

                        </Grid>

                        <ToggleButton   Name="PlayButton"  Style="{StaticResource MainToggleButton}" Margin="2" DockPanel.Dock="Right" Checked="PlayButton_Checked" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image  Source="Images/iconfinder_icon-play_211876.png" Stretch="Fill" Margin="2" ToolTip="Play" Width="28" Height="28"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="RouteCalcButton"  Style="{StaticResource MainToggleButton}" Margin="2" DockPanel.Dock="Right" Checked="RouteCalcButton_Checked" Unchecked="RouteCalcButton_Unchecked" VerticalAlignment="Top" >
                            <ToggleButton.Content>
                                <Image Source="Images/Numbers-2-icon.png" Stretch="None" Margin="2" ToolTip="Route Calculation"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="GribButton"  Style="{StaticResource MainToggleButton}" Margin="2" DockPanel.Dock="Right" Checked="GribButton_Checked" Unchecked="GribButton_Unchecked" VerticalAlignment="Top" >
                            <ToggleButton.Content>
                                <Image Source="Images/Weather-Partly-cloudy-day-icon.png" Stretch="None" Margin="2" ToolTip="Grib"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <ToggleButton  Name="LayersButton"  Style="{StaticResource MainToggleButton}" Margin="2" DockPanel.Dock="Right" Checked="LayersButton_Checked" Unchecked="LayersButton_Unchecked" VerticalAlignment="Top">
                            <ToggleButton.Content>
                                <Image Source="Images/Maps-and-Geolocation-Layers-icon.png" Stretch="None" Margin="2" ToolTip="Layers"/>
                            </ToggleButton.Content>
                        </ToggleButton>

                    </DockPanel>

                    <Slider x:Name="ZoomSlider" Grid.RowSpan="2" Panel.ZIndex="6" Orientation="Vertical" VerticalAlignment="Center" Width="Auto" Height="77" HorizontalAlignment="Right" 
        			TickPlacement="TopLeft" 
        			Minimum="{Binding MinZoomLevel, ElementName=map}"
        			Maximum="{Binding MaxZoomLevel, ElementName=map}"
        			Value="{Binding TargetZoomLevel, ElementName=map}"/>

                </Grid>
                
                <GridSplitter Grid.Row="1" Grid.RowSpan="1" Height="6" HorizontalAlignment="Stretch" Margin="0" x:Name="gridSplitter3" VerticalAlignment="Stretch" Width="Auto" ResizeBehavior="PreviousAndNext" ResizeDirection="Rows" Background="Black" />

                <Grid x:Name="TransportGrid" Grid.Row="2">

                    <mycontrols:NavPlot  x:Name="MainNavPlot"
                                         MouseEnter="MainNavPlot_MouseEnter"
                                         MouseLeave="MainNavPlot_MouseLeave"
                                         MouseMove="MainNavPlot_MouseMove"
                                         MouseDown="MainNavPlot_MouseDown"
                                         MouseUp="MainNavPlot_MouseUp" 
                                         MouseWheel="MainNavPlot_MouseWheel"/>



                        <Slider Name="FwdBackSlider" Orientation="Horizontal" Height="Auto" Margin="22,0,0,2"
                                TickFrequency="10"  HorizontalAlignment="Left" VerticalAlignment="Bottom"
                                Foreground="White"  SmallChange="1" Minimum="-10" Width="50"  ValueChanged="FwdBackSlider_ValueChanged"
                                AutoToolTipPlacement="BottomRight" Delay="488" >
                            <Slider.Triggers>
                                <EventTrigger SourceName="FwdBackSlider" RoutedEvent="Thumb.DragCompleted">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="FwdBackSlider" Storyboard.TargetProperty="Value" From="{Binding Value, ElementName=FwdBackSlider}" To="0" Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Slider.Triggers>
                        </Slider>

                        <ToggleButton   Name="PlotCenterButton"  Style="{StaticResource MainToggleButton}"
                                        HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,25,2"
                                        Checked="PlotCenterButton_Checked" >
                            <ToggleButton.Content>
                                <Image  Source="Images/Image-Edition-Tools-Collapse-icon.png" Stretch="Fill" ToolTip="Center Plot" 
                                        Width="25" Height="25"/>
                            </ToggleButton.Content>
                        </ToggleButton>


                    <ComboBox x:Name="AuxPlotSelectionComboBox" Width="60"  Margin="0,0,25,0"
                              ItemsSource="{Binding}"
                              DisplayMemberPath="Name"
                              SelectedValue="{Binding Source={x:Static p:Settings.Default}, Path=AuxPlotSelector, Mode=TwoWay}"
                              SelectedValuePath="Name"
                              Visibility="Visible" HorizontalAlignment="Right" VerticalAlignment="Top"
                              Foreground="MediumVioletRed"
                              Background="Black"
                              Style="{StaticResource ComboBoxStyle1}" SelectionChanged="AuxPlotSelectionComboBox_SelectionChanged">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ComboBoxItem}">
                                <Setter Property="Foreground" Value="MediumVioletRed"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>

                    <ComboBox x:Name="MainPlotSelectionComboBox" Width="60"
                              ItemsSource="{Binding}"
                              DisplayMemberPath="Name"
                              SelectedValue="{Binding Source={x:Static p:Settings.Default}, Path=MainPlotSelector, Mode=TwoWay}"
                              SelectedValuePath="Name"
                              Visibility="Visible" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="22,0,0,0"
                              Foreground="DodgerBlue" 
                              Background="Black"
                              Style="{StaticResource ComboBoxStyle1}" SelectionChanged="MainPlotSelectionComboBox_SelectionChanged">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ComboBoxItem}">
                                <Setter Property="Foreground" Value="DodgerBlue"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                </Grid>
                
            </Grid>
            
            <GridSplitter Grid.Column="1" Height="Auto" HorizontalAlignment="Left" Margin="0" x:Name="gridSplitter1" VerticalAlignment="Stretch" Width="6" ResizeBehavior="PreviousAndNext" Background="Black" ShowsPreview="False"/>

            <Grid Grid.Column="2"  
                  MouseMove="Grid_MouseMove" 
                  MouseLeftButtonDown="InstrumentStackPanel_MouseLeftButtonDown"
                  MouseLeftButtonUp="InstrumentStackPanel_MouseLeftButtonUp"  >

                <StackPanel Name="InstrumentStackPanel" Background="Black" >
                    <StackPanel.ContextMenu>
                        <ContextMenu Name="InstrumentStackContextMenu">
                            <ContextMenu.ItemContainerStyle>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource ContexMenuItemStyle}">
                                    <Setter Property="Header" Value="{Binding Key}"></Setter>
                                    <EventSetter Event="Click" Handler="InstrumentStackContextMenuItem_Click"/>
                                </Style>
                            </ContextMenu.ItemContainerStyle>
                        </ContextMenu>
                    </StackPanel.ContextMenu>
                </StackPanel>

                <Canvas Name="InstrumentCanvas" 
                        Width="{Binding ActualWidth, ElementName=InstrumentStackPanel}"
                        Height="{Binding ActualHeight, ElementName=InstrumentStackPanel}">

                    <Viewbox Name="DummyInstrument"  Visibility="Hidden">

                        <Border Width="120" Height="70"  >
                            <Border.Background>
                                <SolidColorBrush Color="Gray" Opacity="0.5"/>
                            </Border.Background>
                            <TextBlock Name="DummyInstrumentText" Foreground="Black" FontSize="24" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>

                    </Viewbox>
                </Canvas>

            </Grid>


        </Grid>
    </Grid>

</Window>
